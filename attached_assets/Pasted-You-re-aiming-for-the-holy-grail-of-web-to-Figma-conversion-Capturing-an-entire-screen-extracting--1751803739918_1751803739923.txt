You're aiming for the holy grail of web-to-Figma conversion! Capturing an entire screen, extracting all relevant CSS, applying it accurately in Figma, and generating responsive (mobile, tablet, desktop) versions while maintaining consistent fonts is a complex but achievable goal with the right approach.

Let's break down how to achieve this, building upon the external server architecture we discussed.

Core Challenges & Solutions
Capturing the "Entire Screen" & Dynamic Content:

Challenge: Simple HTML fetching doesn't account for JavaScript-rendered content, scrollable areas, or elements outside the initial viewport.

Solution: Headless Browser (Puppeteer/Playwright) is absolutely essential.

Full-page screenshot: You can instruct the headless browser to take a screenshot of the entire scrollable page, not just the visible viewport. While not directly importing into Figma, this is good for visual comparison and debugging.

Waiting for full render: Use waitUntil: 'networkidle0' or waitForSelector or waitForFunction to ensure all JavaScript has executed and all content (including lazy-loaded images, animations, etc.) is present before extraction.

Viewport control: The headless browser allows you to set the viewport width and height. This is crucial for capturing different responsive states.

Extracting All Relevant CSS & Applying It:

Challenge: Getting just the <style> tags or inline styles isn't enough. You need computed styles for every element, understanding the CSS Box Model, Flexbox, Grid, positioning, and media queries.

Solution: Server-Side CSS Analysis with Headless Browser:

Iterate and getComputedStyle: Your server-side script, running in page.evaluate(), will need to traverse the DOM, similar to how a browser renders. For every visible HTML element, you'll call window.getComputedStyle(element). This gives you the final, resolved values for all CSS properties (colors, fonts, dimensions, etc.) after the cascade and inheritance.

Identify Implicit Layouts (Flex/Grid): This is the tricky part.

When getComputedStyle reveals display: flex or display: grid on a parent element, you'll know to apply Figma's Auto Layout to that parent.

Analyze flex-direction, justify-content, align-items, gap for Flexbox.

Analyze grid-template-columns, grid-template-rows, gap for Grid.

Box Model Conversion: Translate CSS margin, padding, border, width, height into Figma's frame dimensions and Auto Layout padding settings. Remember box-sizing: border-box vs. content-box.

Positioning (absolute, relative, fixed):

position: relative often implies a containing block for absolutely positioned children.

position: absolute elements need to be placed precisely within their parent (which must be a Figma Frame). This often means breaking Auto Layout for that specific child or using absolute positioning in Figma.

position: fixed elements are typically placed relative to the viewport, which is harder to directly map to a single Figma frame unless you put them outside the main artboard.

Backgrounds & Borders: Extract background-color, background-image, border-width, border-color, border-radius.

Font Properties: Extract font-family, font-size, font-weight, line-height, text-align, color.

Applying into Figma (The Figma API Side):

Hierarchical Frame Structure: Translate the DOM tree into a hierarchy of Figma Frames. Every div, section, p, etc., that has distinct styling or acts as a container should ideally become a Figma Frame.

Auto Layout First: Prioritize applying Auto Layout to frames that correspond to Flexbox or Grid containers on the web. This is critical for maintaining responsiveness.

Atomic Design Approach: Consider extracting common patterns (buttons, input fields, cards) as Figma Components on the fly. This makes the output more manageable and editable.

Text Nodes: Create TextNodes for all text content, applying the extracted font properties. Ensure font families are available in Figma (you might need to map web fonts to common Figma fonts or pre-load them if possible).

Image Fills: For <img> tags or CSS background-image properties, fetch the image URLs and apply them as image fills to Figma Rectangles or Frames.

Styles & Variables: Create Figma Styles (for colors, text styles) and Variables (for spacing, primary colors) where applicable, based on recurring CSS values. This makes the generated Figma file much more organized and editable for designers.

Generating Mobile, Tablet, and Desktop Versions
This is where the headless browser's viewport control becomes paramount.

Multiple Capture Runs:

Your Figma plugin sends the URL to your server.

Your server, instead of doing one capture, performs multiple captures for the same URL, each with a different viewport width.

Desktop: page.setViewport({ width: 1440, height: 900 }) (or your preferred desktop breakpoint).

Tablet: page.setViewport({ width: 768, height: 1024 }) (or typical tablet breakpoint).

Mobile: page.setViewport({ width: 375, height: 667 }) (or typical mobile breakpoint like iPhone SE).

For each viewport, you'll repeat the process of waiting for the page to render and extracting the HTML and computed CSS.

Organizing in Figma:

When your code.js receives the data for all three versions, create separate top-level Figma Frames (or Pages) for "Desktop," "Tablet," and "Mobile."

Within each, place the corresponding captured layout.

Use Figma's Sections feature to visually group them.

Maintaining Same Font
Font Matching: When you extract font-family from CSS, you need to map it to a font available in Figma.

Exact Match: If the web font is a Google Font or a common system font, it's likely available directly in Figma.

Closest Match/Fallback: If a specific web font isn't available, you'll need a robust fallback mechanism. You could:

Have a predefined mapping in your server or plugin (e.g., Lato -> Roboto, Helvetica Neue -> Inter).

Detect generic font families (serif, sans-serif, monospace) and apply a reasonable Figma equivalent.

figma.loadFontAsync(): Before creating text nodes with a specific font, you must use await figma.loadFontAsync({ family: '...', style: '...' }). Your server should send enough information to construct this (e.g., font-family: 'Open Sans', font-weight: 400, font-style: 'italic' maps to { family: 'Open Sans', style: 'Italic' }).

Font Files (Advanced & Difficult): Figma does not allow plugins to directly load custom font files (TTF, OTF, WOFF). This means you cannot "download" a web font and use it in Figma through your plugin. You are limited to fonts already installed on the user's system or available through Figma's cloud font library.

High-Level Workflow for Your Plugin
Figma Plugin (UI & Code):

UI: User inputs URL and selects desired breakpoints (e.g., checkbox for desktop, tablet, mobile).

ui.js: Sends URL and selected breakpoints to code.js.

code.js:

Receives URL and breakpoints.

Makes a fetch request to your external server for each requested breakpoint, passing the URL and the target viewport width.

await fetch('YOUR_SERVER_ENDPOINT/capture', { method: 'POST', body: JSON.stringify({ url: websiteUrl, viewportWidth: currentBreakpointWidth }) });

When responses return from the server (containing structured data for each breakpoint):

Creates a new page/top-level frame for each breakpoint.

Iterates through the structured data for each element:

Creates Figma Frames, Rectangles, TextNodes, etc.

Applies layoutMode, padding, itemSpacing for Auto Layout.

Applies colors, border-radius, stroke, background fills.

Uses figma.loadFontAsync() and sets fontName, fontSize, lineHeight, textAlign, textAutoResize for text.

Handles images (creating image fills).

Creates Figma Components for repeating elements (buttons, cards).

Considers creating local text/color styles for consistency.

Handles errors and updates the UI.

External Server (Node.js + Puppeteer/Playwright):

API Endpoint: POST /capture expecting url and viewportWidth.

Headless Browser Launch: puppeteer.launch().

Page Creation: browser.newPage().

Set Viewport: await page.setViewport({ width: viewportWidth, height: arbitraryHeight }); (height can be arbitrary as you'll capture full scroll).

Navigate & Wait: await page.goto(url, { waitUntil: 'networkidle0' });

Execute in Page Context (page.evaluate): This is the most complex part.

Traverse the DOM (document.querySelectorAll('*')).

For each element:

Get getBoundingClientRect() for position and dimensions.

Get window.getComputedStyle(element) to get all resolved CSS properties.

Identify CSS properties that imply Figma Auto Layout (display: flex, grid, flex-direction, justify-content, align-items, gap).

Extract font-family, font-size, font-weight, color, line-height, text-align for text nodes.

Extract background-color, background-image, border-radius, border, opacity, transform values.

Get tagName and textContent.

Determine if it's an image (<img> or background-image). If so, get src.

Return a structured JSON array of objects. Each object represents a potential Figma node and contains all the extracted properties needed to recreate it (e.g., { type: 'frame', x: 0, y: 0, width: 100, height: 50, backgroundColor: '#FFF', layoutMode: 'HORIZONTAL', children: [...] } or { type: 'text', x: 10, y: 10, characters: 'Hello', fontFamily: 'Roboto', fontSize: 16 }).

Send Structured Data: The server sends this JSON array back to the Figma plugin.

This is a significant undertaking, combining advanced web scraping with complex mapping to Figma's API. Start by getting a single element's computed style and recreating it accurately in Figma, then expand to a simple page, then handle responsiveness.